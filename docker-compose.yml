version: '3.8'

services:
  micro-consent-pipeline:
    build: .
    ports:
      - "8000:8000"
      - "8501:8501"
    environment:
      - DEBUG=false
      - LOG_LEVEL=INFO
      - MIN_CONFIDENCE=0.5
      - FASTAPI_PORT=8000
      - STREAMLIT_PORT=8501
      - DATABASE_URL=postgresql://postgres:password@db:5432/micro_consent
      - REDIS_URL=redis://redis:6379/0
      - API_KEY=your-api-key-here
    volumes:
      - ./outputs:/app/outputs
      - ./data:/app/data
    restart: unless-stopped
    depends_on:
      - db
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - monitoring
      - database

  # PostgreSQL Database
  db:
    image: postgres:15
    container_name: micro-consent-db
    environment:
      POSTGRES_DB: micro_consent
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - database

  # Redis for job queue
  redis:
    image: redis:alpine
    container_name: micro-consent-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - database

  # Background worker for async jobs
  worker:
    build: .
    container_name: micro-consent-worker
    command: ["python", "-m", "scripts.start_worker"]
    environment:
      - LOG_LEVEL=INFO
      - DATABASE_URL=postgresql://postgres:password@db:5432/micro_consent
      - REDIS_URL=redis://redis:6379/0
      - API_KEY=your-api-key-here
    volumes:
      - ./outputs:/app/outputs
      - ./data:/app/data
    restart: unless-stopped
    depends_on:
      - db
      - redis
    networks:
      - database

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./ops/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - ./ops/grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: unless-stopped
    networks:
      - monitoring

volumes:
  prometheus_data:
  grafana_data:
  redis_data:

networks:
  monitoring:
    driver: bridge
  database:
    driver: bridge