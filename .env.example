# Micro-Consent-Pipeline Environment Configuration
# Copy this file to .env and adjust values as needed

# ========================================
# SECURITY SETTINGS (REQUIRED)
# ========================================

# API Authentication - Generate with: python -c "import secrets; print(secrets.token_urlsafe(32))"
API_KEY=your-secure-api-key-here

# CORS Origins - Comma-separated list of allowed origins
# Production example: https://your-app.com,https://dashboard.your-app.com
# Development example: http://localhost:3000,http://localhost:8501
ALLOWED_ORIGINS=http://localhost:3000,http://localhost:8501

# Request Limits
MAX_PAYLOAD_BYTES=10485760  # 10MB maximum request size
REQUEST_TIMEOUT=30          # 30 seconds maximum request duration

# ========================================
# APPLICATION SETTINGS
# ========================================

# Server Configuration
FASTAPI_PORT=8000
STREAMLIT_PORT=8501

# Logging
LOG_LEVEL=INFO              # DEBUG, INFO, WARNING, ERROR, CRITICAL
DEBUG_LOGGING=false

# Pipeline Configuration
MIN_CONFIDENCE=0.5
PIPELINE_TIMEOUT=300
INPUT_FORMAT=auto
DEFAULT_FORMAT=json
OUTPUT_DIR=outputs

# NLP Settings
DEFAULT_MODEL=en_core_web_sm
NLP_MODEL=en_core_web_sm
LANGUAGE_SUPPORT=en

# ========================================
# OBSERVABILITY SETTINGS
# ========================================

# OpenTelemetry Tracing (Optional)
ENABLE_TRACING=false
OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4317
SERVICE_NAME=micro-consent-pipeline

# ========================================
# DATABASE SETTINGS
# ========================================

# Database URL - Choose one:
# PostgreSQL (Production): postgresql://username:password@host:port/database
# SQLite (Development): sqlite:///data/micro_consent.db
DATABASE_URL=sqlite:///data/micro_consent.db

# Database Options
DATABASE_ECHO=false         # Log SQL queries (useful for debugging)

# ========================================
# ASYNC JOB QUEUE SETTINGS
# ========================================

# Redis Configuration
# Redis URL format: redis://[password@]host:port/database
REDIS_URL=redis://localhost:6379/0

# Job Processing Settings
JOB_TIMEOUT=300            # 5 minutes default timeout for jobs
RESULT_TTL=3600            # 1 hour - how long to keep job results

# ========================================
# DOCKER COMPOSE SETTINGS
# ========================================

# PostgreSQL Settings (for docker-compose)
POSTGRES_DB=micro_consent
POSTGRES_USER=postgres
POSTGRES_PASSWORD=password

# Production Security Notes:
# 1. Generate a strong API_KEY using: python -c "import secrets; print(secrets.token_urlsafe(32))"
# 2. Use strong database passwords
# 3. Restrict ALLOWED_ORIGINS to your actual domains
# 4. Use environment-specific Redis passwords
# 5. Enable DATABASE_ECHO=false in production
# 6. Consider using Redis AUTH in production
SERVICE_NAME=micro-consent-pipeline

# ========================================
# DATABASE (OPTIONAL)
# ========================================

# DATABASE_URL=postgresql://user:password@localhost/micro_consent_pipeline

# ========================================
# PRODUCTION SECURITY NOTES
# ========================================

# 1. Generate strong API keys (32+ characters)
# 2. Use HTTPS URLs in ALLOWED_ORIGINS for production
# 3. Set restrictive CORS origins (no wildcards)
# 4. Enable structured logging with LOG_LEVEL=INFO
# 5. Consider reducing MAX_PAYLOAD_BYTES for your use case
# 6. Use environment-specific values for each deployment
# 7. Never commit actual secrets to version control
# 8. Rotate API keys regularly (quarterly recommended)