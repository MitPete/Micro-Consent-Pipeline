name: Release Build & Publish

on:
  push:
    branches: [main]
    tags: ["v*"]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov

      - name: Set up environment variables
        run: |
          echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/test_db" >> $GITHUB_ENV
          echo "REDIS_URL=redis://localhost:6379/0" >> $GITHUB_ENV
          echo "API_SECRET_KEY=test-secret-key-for-github-actions" >> $GITHUB_ENV
          echo "ENVIRONMENT=test" >> $GITHUB_ENV

      - name: Initialize database
        run: |
          python -c "
          import sys
          sys.path.append('.')
          from db.session import init_db
          init_db()
          print('Database initialized')
          "

      - name: Run tests with coverage
        run: |
          pytest --cov=micro_consent_pipeline --cov=api --cov=db --cov=worker \
                 --cov-report=xml --cov-report=term-missing -v

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Test CLI version
        run: |
          VERSION=$(cat VERSION)
          CLI_VERSION=$(python main.py --version 2>&1 | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+')
          echo "VERSION file: $VERSION"
          echo "CLI version: $CLI_VERSION"
          if [ "$VERSION" != "$CLI_VERSION" ]; then
            echo "Version mismatch between VERSION file and CLI"
            exit 1
          fi

      - name: Test API health endpoint
        run: |
          # Start API in background
          python -m uvicorn api.app:app --host 0.0.0.0 --port 8000 &
          API_PID=$!

          # Wait for API to start
          sleep 10

          # Test health endpoint
          HEALTH_RESPONSE=$(curl -s http://localhost:8000/health)
          echo "Health response: $HEALTH_RESPONSE"

          # Check if version is in response
          VERSION=$(cat VERSION)
          if ! echo "$HEALTH_RESPONSE" | grep -q "$VERSION"; then
            echo "Version not found in health response"
            kill $API_PID
            exit 1
          fi

          # Cleanup
          kill $API_PID

  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))

    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
      version: ${{ steps.version.outputs.version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION=$(cat VERSION)
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ steps.version.outputs.version }}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ steps.version.outputs.version }}

      - name: Output image
        id: image
        run: |
          echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}" >> $GITHUB_OUTPUT

  changelog:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Run changelog generation
        run: |
          bash scripts/update_changelog.sh --release

      - name: Commit changelog
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add CHANGELOG.md VERSION || true
          git commit -m "docs: auto-update changelog" || echo "No changes to commit"
          git push

  release:
    runs-on: ubuntu-latest
    needs: [test, build]
    if: startsWith(github.ref, 'refs/tags/v')

    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install git-changelog

      - name: Extract version
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Generate release notes
        id: release_notes
        run: |
          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 ${{ steps.version.outputs.tag }}^ 2>/dev/null || echo "")

          if [ -n "$PREVIOUS_TAG" ]; then
            RANGE="$PREVIOUS_TAG..${{ steps.version.outputs.tag }}"
          else
            RANGE="${{ steps.version.outputs.tag }}"
          fi

          # Generate release notes
          echo "## What's Changed" > release_notes.md
          echo "" >> release_notes.md

          # Get commits and categorize them
          git log --oneline --pretty=format:"%s" $RANGE | while IFS= read -r commit; do
            if echo "$commit" | grep -q "^feat(\|^feat:"; then
              echo "### ✨ Features" >> release_notes.md
              echo "- $commit" >> release_notes.md
              echo "" >> release_notes.md
            elif echo "$commit" | grep -q "^fix(\|^fix:"; then
              echo "### 🐛 Bug Fixes" >> release_notes.md
              echo "- $commit" >> release_notes.md
              echo "" >> release_notes.md
            elif echo "$commit" | grep -q "^docs(\|^docs:"; then
              echo "### 📚 Documentation" >> release_notes.md
              echo "- $commit" >> release_notes.md
              echo "" >> release_notes.md
            elif echo "$commit" | grep -q "^perf(\|^perf:"; then
              echo "### ⚡ Performance" >> release_notes.md
              echo "- $commit" >> release_notes.md
              echo "" >> release_notes.md
            else
              echo "### 🔧 Other Changes" >> release_notes.md
              echo "- $commit" >> release_notes.md
              echo "" >> release_notes.md
            fi
          done

          # Add Docker image info
          echo "" >> release_notes.md
          echo "## 🐳 Docker Images" >> release_notes.md
          echo "" >> release_notes.md
          echo "This release is available as a Docker image:" >> release_notes.md
          echo '```bash' >> release_notes.md
          echo "docker pull ${{ needs.build.outputs.image }}" >> release_notes.md
          echo '```' >> release_notes.md
          echo "" >> release_notes.md
          echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/${PREVIOUS_TAG}...${{ steps.version.outputs.tag }}" >> release_notes.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: Release ${{ steps.version.outputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  security:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build.outputs.image }}
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: "trivy-results.sarif"

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main'
    environment: staging

    steps:
      - name: Deploy to staging
        run: |
          echo "Deploying ${{ needs.build.outputs.image }} to staging environment"
          # Add your deployment logic here
          # For example, update Kubernetes deployment, ECS service, etc.

          # Example with kubectl (if using Kubernetes):
          # kubectl set image deployment/micro-consent-pipeline \
          #   micro-consent-pipeline=${{ needs.build.outputs.image }}

          # Example with Docker Compose (if using Docker):
          # docker-compose -f docker-compose.staging.yml pull
          # docker-compose -f docker-compose.staging.yml up -d

  deploy-production:
    runs-on: ubuntu-latest
    needs: [test, build, release]
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production

    steps:
      - name: Deploy to production
        run: |
          echo "Deploying ${{ needs.build.outputs.image }} to production environment"
          # Add your production deployment logic here

          # Example notification to team
          echo "🚀 Successfully deployed Micro-Consent Pipeline ${{ needs.build.outputs.version }} to production!"
